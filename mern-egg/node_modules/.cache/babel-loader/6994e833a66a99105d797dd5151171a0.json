{"ast":null,"code":"const fs = require('fs');\n\nconst request = require('request');\n\nconst ical = require('./ical.js');\n/**\n * ICal event object.\n *\n * These two fields are always present:\n *  - type\n *  - params\n *\n * The rest of the fields may or may not be present depending on the input.\n * Do not assume any of these fields are valid and check them before using.\n * Most types are simply there as a general guide for IDEs and users.\n *\n * @typedef iCalEvent\n * @type {object}\n *\n * @property {string} type           - Type of event.\n * @property {Array} params          - Extra event parameters.\n *\n * @property {?object} start         - When this event starts.\n * @property {?object} end           - When this event ends.\n *\n * @property {?string} summary       - Event summary string.\n * @property {?string} description   - Event description.\n *\n * @property {?object} dtstamp       - DTSTAMP field of this event.\n *\n * @property {?object} created       - When this event was created.\n * @property {?object} lastmodified  - When this event was last modified.\n *\n * @property {?string} uid           - Unique event identifier.\n *\n * @property {?string} status        - Event status.\n *\n * @property {?string} sequence      - Event sequence.\n *\n * @property {?string} url           - URL of this event.\n *\n * @property {?string} location      - Where this event occurs.\n * @property {?{\n *     lat: number, lon: number\n * }} geo                            - Lat/lon location of this event.\n *\n * @property {?Array.<string>}       - Array of event catagories.\n */\n\n/**\n * Object containing iCal events.\n * @typedef {Object.<string, iCalEvent>} iCalData\n */\n\n/**\n * Callback for iCal parsing functions with error and iCal data as a JavaScript object.\n * @callback icsCallback\n * @param {Error} err\n * @param {iCalData} ics\n */\n\n/**\n * A Promise that is undefined if a compatible callback is passed.\n * @typedef {(Promise.<iCalData>|undefined)} optionalPromise\n */\n// utility to allow callbacks to be used for promises\n\n\nfunction promiseCallback(fn, cb) {\n  const promise = new Promise(fn);\n\n  if (!cb) {\n    return promise;\n  }\n\n  promise.then(returnValue => {\n    cb(null, returnValue);\n  }).catch(error => {\n    cb(error, null);\n  });\n} // Sync functions\n\n\nconst sync = {}; // Async functions\n\nconst async = {}; // Auto-detect functions for backwards compatibility.\n\nconst autodetect = {};\n/**\n * Download an iCal file from the web and parse it.\n *\n * @param {string} url                - URL of file to request.\n * @param {Object|icsCallback} [opts] - Options to pass to request() from npm:request.\n *                                      Alternatively you can pass the callback function directly.\n *                                      If no callback is provided a promise will be returned.\n * @param {icsCallback} [cb]          - Callback function.\n *                                      If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\n\nasync.fromURL = function (url, options, cb) {\n  return promiseCallback((resolve, reject) => {\n    request(url, options, (error, response, data) => {\n      if (error) {\n        reject(error);\n        return;\n      } // If (r.statusCode !== 200) {\n      // all ok status codes should be accepted (any 2XX code)\n\n\n      if (Math.floor(response.statusCode / 100) !== 2) {\n        reject(new Error(`${response.statusCode} ${response.statusMessage}`));\n        return;\n      }\n\n      ical.parseICS(data, (error, ics) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(ics);\n      });\n    });\n  }, cb);\n};\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\n\n\nasync.parseFile = function (filename, cb) {\n  return promiseCallback((resolve, reject) => {\n    fs.readFile(filename, 'utf8', (error, data) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      ical.parseICS(data, (error, ics) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(ics);\n      });\n    });\n  }, cb);\n};\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data       - String containing iCal data.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\n\n\nasync.parseICS = function (data, cb) {\n  return promiseCallback((resolve, reject) => {\n    ical.parseICS(data, (error, ics) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(ics);\n    });\n  }, cb);\n};\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n *\n * @returns {iCalData} Parsed iCal data.\n */\n\n\nsync.parseFile = function (filename) {\n  const data = fs.readFileSync(filename, 'utf8');\n  return ical.parseICS(data);\n};\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data - String containing iCal data.\n *\n * @returns {iCalData} Parsed iCal data.\n */\n\n\nsync.parseICS = function (data) {\n  return ical.parseICS(data);\n};\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided this function runs synchronously.\n *\n * @returns {iCalData|undefined} Parsed iCal data or undefined if a callback is being used.\n */\n\n\nautodetect.parseFile = function (filename, cb) {\n  if (!cb) {\n    return sync.parseFile(filename);\n  }\n\n  async.parseFile(filename, cb);\n};\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data       - String containing iCal data.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided this function runs synchronously.\n *\n * @returns {iCalData|undefined} Parsed iCal data or undefined if a callback is being used.\n */\n\n\nautodetect.parseICS = function (data, cb) {\n  if (!cb) {\n    return sync.parseICS(data);\n  }\n\n  async.parseICS(data, cb);\n}; // Export api functions\n\n\nmodule.exports = {\n  // Autodetect\n  fromURL: async.fromURL,\n  parseFile: autodetect.parseFile,\n  parseICS: autodetect.parseICS,\n  // Sync\n  sync,\n  // Async\n  async,\n  // Other backwards compat things\n  objectHandlers: ical.objectHandlers,\n  handleObject: ical.handleObject,\n  parseLines: ical.parseLines\n};","map":{"version":3,"sources":["/Users/tyleryoun/Desktop/PROJECT/mern-egg/node_modules/node-ical/node-ical.js"],"names":["fs","require","request","ical","promiseCallback","fn","cb","promise","Promise","then","returnValue","catch","error","sync","async","autodetect","fromURL","url","options","resolve","reject","response","data","Math","floor","statusCode","Error","statusMessage","parseICS","ics","parseFile","filename","readFile","readFileSync","module","exports","objectHandlers","handleObject","parseLines"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst request = require('request');\n\nconst ical = require('./ical.js');\n\n/**\n * ICal event object.\n *\n * These two fields are always present:\n *  - type\n *  - params\n *\n * The rest of the fields may or may not be present depending on the input.\n * Do not assume any of these fields are valid and check them before using.\n * Most types are simply there as a general guide for IDEs and users.\n *\n * @typedef iCalEvent\n * @type {object}\n *\n * @property {string} type           - Type of event.\n * @property {Array} params          - Extra event parameters.\n *\n * @property {?object} start         - When this event starts.\n * @property {?object} end           - When this event ends.\n *\n * @property {?string} summary       - Event summary string.\n * @property {?string} description   - Event description.\n *\n * @property {?object} dtstamp       - DTSTAMP field of this event.\n *\n * @property {?object} created       - When this event was created.\n * @property {?object} lastmodified  - When this event was last modified.\n *\n * @property {?string} uid           - Unique event identifier.\n *\n * @property {?string} status        - Event status.\n *\n * @property {?string} sequence      - Event sequence.\n *\n * @property {?string} url           - URL of this event.\n *\n * @property {?string} location      - Where this event occurs.\n * @property {?{\n *     lat: number, lon: number\n * }} geo                            - Lat/lon location of this event.\n *\n * @property {?Array.<string>}       - Array of event catagories.\n */\n/**\n * Object containing iCal events.\n * @typedef {Object.<string, iCalEvent>} iCalData\n */\n/**\n * Callback for iCal parsing functions with error and iCal data as a JavaScript object.\n * @callback icsCallback\n * @param {Error} err\n * @param {iCalData} ics\n */\n/**\n * A Promise that is undefined if a compatible callback is passed.\n * @typedef {(Promise.<iCalData>|undefined)} optionalPromise\n */\n\n// utility to allow callbacks to be used for promises\nfunction promiseCallback(fn, cb) {\n  const promise = new Promise(fn);\n  if (!cb) {\n    return promise;\n  }\n\n  promise\n    .then(returnValue => {\n      cb(null, returnValue);\n    })\n    .catch(error => {\n      cb(error, null);\n    });\n}\n\n// Sync functions\nconst sync = {};\n// Async functions\nconst async = {};\n// Auto-detect functions for backwards compatibility.\nconst autodetect = {};\n\n/**\n * Download an iCal file from the web and parse it.\n *\n * @param {string} url                - URL of file to request.\n * @param {Object|icsCallback} [opts] - Options to pass to request() from npm:request.\n *                                      Alternatively you can pass the callback function directly.\n *                                      If no callback is provided a promise will be returned.\n * @param {icsCallback} [cb]          - Callback function.\n *                                      If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\nasync.fromURL = function (url, options, cb) {\n  return promiseCallback((resolve, reject) => {\n    request(url, options, (error, response, data) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      // If (r.statusCode !== 200) {\n      // all ok status codes should be accepted (any 2XX code)\n      if (Math.floor(response.statusCode / 100) !== 2) {\n        reject(new Error(`${response.statusCode} ${response.statusMessage}`));\n        return;\n      }\n\n      ical.parseICS(data, (error, ics) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(ics);\n      });\n    });\n  }, cb);\n};\n\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\nasync.parseFile = function (filename, cb) {\n  return promiseCallback((resolve, reject) => {\n    fs.readFile(filename, 'utf8', (error, data) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      ical.parseICS(data, (error, ics) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(ics);\n      });\n    });\n  }, cb);\n};\n\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data       - String containing iCal data.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided a promise will be returned.\n *\n * @returns {optionalPromise} Promise is returned if no callback is passed.\n */\nasync.parseICS = function (data, cb) {\n  return promiseCallback((resolve, reject) => {\n    ical.parseICS(data, (error, ics) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(ics);\n    });\n  }, cb);\n};\n\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n *\n * @returns {iCalData} Parsed iCal data.\n */\nsync.parseFile = function (filename) {\n  const data = fs.readFileSync(filename, 'utf8');\n  return ical.parseICS(data);\n};\n\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data - String containing iCal data.\n *\n * @returns {iCalData} Parsed iCal data.\n */\nsync.parseICS = function (data) {\n  return ical.parseICS(data);\n};\n\n/**\n * Load iCal data from a file and parse it.\n *\n * @param {string} filename   - File path to load.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided this function runs synchronously.\n *\n * @returns {iCalData|undefined} Parsed iCal data or undefined if a callback is being used.\n */\nautodetect.parseFile = function (filename, cb) {\n  if (!cb) {\n    return sync.parseFile(filename);\n  }\n\n  async.parseFile(filename, cb);\n};\n\n/**\n * Parse iCal data from a string.\n *\n * @param {string} data       - String containing iCal data.\n * @param {icsCallback} [cb]  - Callback function.\n *                              If no callback is provided this function runs synchronously.\n *\n * @returns {iCalData|undefined} Parsed iCal data or undefined if a callback is being used.\n */\nautodetect.parseICS = function (data, cb) {\n  if (!cb) {\n    return sync.parseICS(data);\n  }\n\n  async.parseICS(data, cb);\n};\n\n// Export api functions\nmodule.exports = {\n  // Autodetect\n  fromURL: async.fromURL,\n  parseFile: autodetect.parseFile,\n  parseICS: autodetect.parseICS,\n  // Sync\n  sync,\n  // Async\n  async,\n  // Other backwards compat things\n  objectHandlers: ical.objectHandlers,\n  handleObject: ical.handleObject,\n  parseLines: ical.parseLines\n};\n"]},"metadata":{},"sourceType":"script"}